# HOWTO

## Initial Setup

On `Debian 10 (Buster)` or `Ubuntu 18.04 LTS (Bionic Beaver)`:
```
# Fetch prerequisites
sudo apt install git git-lfs ssh-client make texlive-full
# or for a minimal setup
sudo apt install git git-lfs ssh-client make texlive latexmk biber texlive-bibtex-extra
```

On Windows 10:
* Download [Docker for Windows](https://docs.docker.com/docker-for-windows/) and run in Cmd to get a LaTeX environment:
  ```
  # fetch docker image
  docker pull jm1337/debian-tex:buster

  # log into docker container
  docker run -ti --rm jm1337/debian-tex:buster
  # or for a persistent home directory, e.g.
  docker run -ti --rm -v C:\YOUR_DIR:/home --workdir=/home jm1337/debian-tex:buster
  ```
* Or install [Git for Windows](https://git-scm.com/download/win) and use your favorite LaTeX editor
* **Watch out, this repository uses symbolic links!** Windows supports symbolic links since Vista,
  but by default, Git for Windows creates [copies instead of symbolic links][1]. Git for Windows
  has to be [configured, e.g. during install, to create and use symbolic links][2]. But still, you
  might run into problems with Windows Subsystem for Linux (WSL), get help [here][3] and [here][4].

  [1]: https://github.com/git-for-windows/git/wiki/Symbolic-Links
  [2]: https://github.community/t5/How-to-use-Git-and-GitHub/git-bash-symbolic-links-on-windows/m-p/11488#M3732
  [3]: https://github.com/microsoft/WSL/issues/3611
  [4]: https://stackoverflow.com/questions/56504821/sharing-git-repo-symlinks-between-windows-and-wsl



## Git Repository Setup

```
# Optional: Make git pull fetch and update new commits of all populated submodules
git config --global submodule.recurse true

# Optional: Make git pull always use --rebase instead of merging
# Ref.: https://www.atlassian.com/git/articles/git-team-workflows-merge-or-rebase
git config --global pull.rebase true

# Clone repository
git clone --recurse-submodules git@git.inf.h-brs.de:EXAMPLE_PATH_TO_YOUR_REPOSITORY.git
# or
git clone --recurse-submodules https://git.inf.h-brs.de/EXAMPLE_PATH_TO_YOUR_REPOSITORY

# Enter repository
cd EXAMPLE_PATH_TO_YOUR_REPOSITORY/

# Setup Git LFS
git lfs install --local
```



## Daily Usage

```
# Edit files
editor fgmt_*.tex

# NOTE: Do not edit files in submodules directly; except for 'git pull' do not
#       execute any other git command within submodules. If you want to change
#       any content within a submodule then 'git clone' its repository to a
#       separate path outside of this git repository here. Edit, commit and push
#       changes there. Then call 'git pull' in the submodule folder here. This
#       will save yourself a lot of issues.

# Build document
make

# Stage all changes
git add .
# or stage new files and modifications, without deletions
git add --ignore-removal .
# or stage modifications and deletions, without new files
git add -u

# Record changes
git commit

# Rebase (instead of merge) your commit onto the upstream branch after fetching
#
# NOTE: If you do not rebase your commit now, then 'git push' will force you
#       to merge your branch and the upstream branch later!
git pull --rebase

# Update upstream
git push

# Remove build files
make clean
```
